plugins {
	id 'java-library'
	id 'maven-publish'
}

version = ARTIFACT_VERSION
def group = 'goa.systems'

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

configurations {
	testImplementation.extendsFrom(fullSetup)
}

dependencies {

	implementation 'org.slf4j:slf4j-api:2.0.7'
	
	/* Specify all dependencies in configuration fullSetup that are conveniently used during development and
	   that allow execution of the application but which are optional and up to the customer to define. */
	fullSetup ('ch.qos.logback:logback-core:1.4.8') {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	fullSetup ('ch.qos.logback:logback-classic:1.4.8') {
		exclude group: 'org.slf4j', module: 'slf4j-api'
	}
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
}

test {
	useJUnitPlatform()
}

repositories {
	mavenCentral()
}

task export(group: 'build', description: 'Exports application.') {
	
	dependsOn build, jar
	
	doLast {
	
		copy {
			from "build/libs"
			into "build/export/lib"
			include "*.jar"
		}
	
		copy {
			from "."
			into "build/export"
			include "README.md"
			filter { line -> line.replace('{version}', version) }
		}
		
		copy {
			from configurations.runtimeClasspath
			from configurations.fullSetup
			into 'build/export/lib'
		}
		
		copy {
			from 'src/test/resources/logback.xml'
			into 'build/export/conf'
		}
		
		copy {
			from 'build/publications/maven/pom-default.xml'
			into 'build/export/conf'
		}
	}
}

task writeVariables(group: 'build', description: 'Writes variables for maven') {
	dependsOn export
	doLast {
		
		def artifact = rootProject.name.substring(group.size() + 1)
		file("build/export/vars").text = """export VERSION=${version}\nexport GROUP=${group}\nexport ARTIFACT=${artifact}"""
	}
}
		
task distribute(type: Tar, group: 'build', description: 'Creates tgz distribution.') {
	dependsOn writeVariables
	from 'build/export'
	archiveExtension = 'tar.gz'
	compression = Compression.GZIP
}

java {
	withSourcesJar()
	withJavadocJar()
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = group
			artifactId = rootProject.name.substring(group.size() + 1)
			version = version
			from components.java

			pom {
				name = 'My Library'
				description = 'A description of my library'
			}
		}
	}
}